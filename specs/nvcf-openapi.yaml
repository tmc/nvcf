openapi: 3.0.1
info:
  title: Cloud Functions
  termsOfService: https://www.nvidia.com/en-us/legal_info
  contact:
    name: NVIDIA
    url: https://www.nvidia.com/
  version: 2.124.1
servers:
  - url: https://api.nvcf.nvidia.com
    description: Generated server url
tags:
  - name: Function Invocation
    description: 'Defines function pass-through invocation endpoints where the invocation payload  is passed as-is without any wrapper. All tne endpoints defined in this API  require either a bearer token or an api-key with ''invoke_function'' scope in the  HTTP Authorization header. '
  - name: Asset Management
    description: Defines Asset Management endpoints for Account Admins/Users. All the endpoints  defined in this API require a bearer token in the HTTP Authorization header with  'invoke_function' scope.
  - name: Authorized Accounts
    description: Defines endpoints related to associating authorized accounts with a function for  Account Admins. All the endpoints defined in this API require a bearer token with  'authorize_clients' scope in HTTP Authorization header.
  - name: Cluster Groups and GPUs
    description: Defines endpoints to list Cluster Groups and GPUs for Account Admins. All tne  endpoints defined in this API require a bearer token with 'list_cluster_groups'  scope in the HTTP Authorization header.
  - name: Envelope Function Invocation
    description: 'Defines endpoints that use an envelope to wrap the invocation payload for  Account Admins/Users. All the endpoints defined in this API require either a  bearer token or an api-key in the HTTP Authorization header with ''invoke_function''  scope. These endpoints have been deprecated. Please use pass-through function  invocation endpoints. '
  - name: Queue Details
    description: 'Defines Queue Details endpoints for Account Admins/Users. All tne endpoints  defined in this API require either a bearer token or an api-key with  ''queue_details'' scope in the HTTP Authorization header. '
  - name: Function Management
    description: 'Defines Function Management endpoints for Account Admins. All tne endpoints  defined in this API require a bearer token or an api-key with appropriate scope in  the HTTP Authorization header. '
  - name: Client Management For NVIDIA Super Admins
    description: 'Defines Client Management endpoints. These endpoints can only be invoked by  NVIDIA Super Admins and require a bearer token in HTTP Authorization header with  ''account_setup'' scope. '
  - name: Function Deployment
    description: Defines Function Deployment endpoints for Account Admins. All tne endpoints defined  in this API require a bearer token with 'deploy_function' scope in the HTTP  Authorization header.
  - name: User Secret Management
    description: 'Defines User Secret Management endpoints for Account Admins. All tne endpoints  defined in this API require a bearer token or an api-key with appropriate scope in  the HTTP Authorization header. '
paths:
  /v2/nvcf/secrets/functions/{functionId}/versions/{versionId}:
    put:
      tags:
        - User Secret Management
      summary: Update user secrets for a function version
      description: 'Updates secrets for the specified function version. This endpoint  requires either a bearer token or an api-key with ''update_secrets''  scope in the HTTP Authorization header. '
      operationId: updateSecrets
      parameters:
        - name: functionId
          in: path
          description: Function id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
        - name: versionId
          in: path
          description: Function version id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSecretsRequest'
        required: true
      responses:
        "200":
          description: OK
  /v2/nvcf/metadata/functions/{functionId}/versions/{functionVersionId}:
    put:
      tags:
        - Function Management
      summary: Updates metadata such as tags of the specified function version.
      description: 'Updates metadata, such as tags, of the specified function version within the authenticated NVIDIA Cloud Account. Values specified in the payload completely override the existing values. Requires a bearer token with ''update_function'' scope in the HTTP Authorization header. '
      operationId: updateFunctionMetadata
      parameters:
        - name: functionId
          in: path
          description: Function id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
        - name: functionVersionId
          in: path
          description: Version id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFunctionMetadataRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionResponse'
  /v2/nvcf/deployments/functions/{functionId}/versions/{functionVersionId}:
    get:
      tags:
        - Function Deployment
      summary: Get Function Deployment Details
      description: 'Allows Account Admins to retrieve the deployment details of the specified  function version. Access to this endpoint mandates a bearer token with ''deploy_function'' scope in the  HTTP Authorization header. '
      operationId: getFunctionDeployment
      parameters:
        - name: functionId
          in: path
          description: Function id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
        - name: functionVersionId
          in: path
          description: Function version id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentResponse'
    put:
      tags:
        - Function Deployment
      summary: Update Function Deployment
      description: 'Updates the deployment specs of the specified function version. It''s important  to note that GPU type and backend configurations cannot be modified through  this endpoint. If the specified function is public, then Account Admin cannot  perform this operation. Access to this endpoint mandates a bearer token with ''deploy_function'' scope in the  HTTP Authorization header. '
      operationId: updateFunctionDeployment
      parameters:
        - name: functionId
          in: path
          description: Function id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
        - name: functionVersionId
          in: path
          description: Function version id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFunctionDeploymentRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentResponse'
    post:
      tags:
        - Function Deployment
      summary: Deploy Function
      description: 'Initiates deployment for the specified function version. Upon invocation of  this endpoint, the function''s status transitions to ''DEPLOYING''. If the  specified function version is public, then Account Admin cannot perform this  operation. Access to this endpoint mandates a bearer token with ''deploy_function'' scope in the  HTTP Authorization header. '
      operationId: createFunctionDeployment
      parameters:
        - name: functionId
          in: path
          description: Function id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
        - name: functionVersionId
          in: path
          description: Function version id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunctionDeploymentRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentResponse'
    delete:
      tags:
        - Function Deployment
      summary: Delete Function Deployment
      description: 'Deletes the deployment associated with the specified function. Upon  deletion, any active instances will be terminated, and the function''s status  will transition to ''INACTIVE''. To undeploy a function version gracefully,  specify ''graceful=true'' query parameter, allowing current tasks to complete  before terminating the instances. If the specified function version is public,  then Account Admin cannot perform this operation. Access to this endpoint mandates a bearer token with ''deploy_function'' scope in the  HTTP Authorization header. '
      operationId: deleteFunctionDeployment
      parameters:
        - name: functionId
          in: path
          description: Function id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
        - name: functionVersionId
          in: path
          description: Function version id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
        - name: graceful
          in: query
          description: Query param to deactivate function for graceful shutdown
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionResponse'
  /v2/nvcf/pexec/functions/{functionId}:
    post:
      tags:
        - Function Invocation
      summary: Call Function
      description: 'Invokes the specified function that was successfully deployed. If the version  is not specified, any active function versions will handle the request. If  the version is specified in the URI, then the request is exclusively processed  by the designated version of the function. By default, this endpoint will block  for 5 seconds. If the request is not fulfilled before the timeout, it''s status  is considered in-progress or pending and the response includes HTTP status code  202 with an invocation request ID, indicating that the client should commence  polling for the result using the invocation request ID. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with ''invoke_function''  scope in the HTTP Authorization header. Additionally, this endpoint has the  capability to provide updates on the progress of the request, contingent  upon the workload''s provision of such information. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. '
      operationId: invokeFunctionStreaming_2
      parameters:
        - name: NVCF-INPUT-ASSET-REFERENCES
          in: header
          required: false
          schema:
            maxItems: 2147483647
            minItems: 0
            type: array
            items:
              type: string
        - name: functionId
          in: path
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
        - name: NVCF-POLL-SECONDS
          in: header
          required: false
          schema:
            maximum: 300
            minimum: 0
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        "200":
          description: Invocation is fulfilled
          headers:
            NVCF-REQID:
              description: Invocation Request Id
              style: simple
              schema:
                type: string
            NVCF-PERCENT-COMPLETE:
              description: Percentage complete
              style: simple
              schema:
                type: string
            NVCF-STATUS:
              description: Invocation status
              style: simple
              schema:
                type: string
          content:
            text/event-stream:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    short:
                      type: integer
                      format: int32
                    char:
                      type: string
                    int:
                      type: integer
                      format: int32
                    long:
                      type: integer
                      format: int64
                    float:
                      type: number
                      format: float
                    double:
                      type: number
                      format: double
                    direct:
                      type: boolean
                    readOnly:
                      type: boolean
            application/json:
              schema:
                type: object
                properties:
                  short:
                    type: integer
                    format: int32
                  char:
                    type: string
                  int:
                    type: integer
                    format: int32
                  long:
                    type: integer
                    format: int64
                  float:
                    type: number
                    format: float
                  double:
                    type: number
                    format: double
                  direct:
                    type: boolean
                  readOnly:
                    type: boolean
        "202":
          description: Result is pending. Client should poll using the requestId.
          headers:
            NVCF-REQID:
              description: Invocation Request Id
              style: simple
              schema:
                type: string
            NVCF-PERCENT-COMPLETE:
              description: Percentage complete
              style: simple
              schema:
                type: string
            NVCF-STATUS:
              description: Invocation status
              style: simple
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  short:
                    type: integer
                    format: int32
                  char:
                    type: string
                  int:
                    type: integer
                    format: int32
                  long:
                    type: integer
                    format: int64
                  float:
                    type: number
                    format: float
                  double:
                    type: number
                    format: double
                  direct:
                    type: boolean
                  readOnly:
                    type: boolean
        "302":
          description: |
            Client should use the URL specified in the 'Location' response header to fetch
             large result.
          headers:
            NVCF-REQID:
              description: Invocation Request Id
              style: simple
              schema:
                type: string
            NVCF-PERCENT-COMPLETE:
              description: Percentage complete
              style: simple
              schema:
                type: string
            NVCF-STATUS:
              description: Invocation status
              style: simple
              schema:
                type: string
            Location:
              description: URL to get the result
              style: simple
              schema:
                type: string
        "402":
          description: Cloud credits expired for public functions. Please contact NVIDIA representatives.
          content:
            application/json:
              schema:
                type: object
                properties:
                  short:
                    type: integer
                    format: int32
                  char:
                    type: string
                  int:
                    type: integer
                    format: int32
                  long:
                    type: integer
                    format: int64
                  float:
                    type: number
                    format: float
                  double:
                    type: number
                    format: double
                  direct:
                    type: boolean
                  readOnly:
                    type: boolean
        "403":
          description: |
            Either missing scope in the auth(SSA JWT / SAK) token and/or missing resource entry
             in the SAK for the function.
          content:
            application/json:
              schema:
                type: object
                properties:
                  short:
                    type: integer
                    format: int32
                  char:
                    type: string
                  int:
                    type: integer
                    format: int32
                  long:
                    type: integer
                    format: int64
                  float:
                    type: number
                    format: float
                  double:
                    type: number
                    format: double
                  direct:
                    type: boolean
                  readOnly:
                    type: boolean
        "429":
          description: Client is doing too many requests per second and should slow down request rate.
          content:
            application/json:
              schema:
                type: object
                properties:
                  short:
                    type: integer
                    format: int32
                  char:
                    type: string
                  int:
                    type: integer
                    format: int32
                  long:
                    type: integer
                    format: int64
                  float:
                    type: number
                    format: float
                  double:
                    type: number
                    format: double
                  direct:
                    type: boolean
                  readOnly:
                    type: boolean
  /v2/nvcf/pexec/functions/{functionId}/versions/{versionId}:
    post:
      tags:
        - Function Invocation
      summary: Call Function
      description: 'Invokes the specified function that was successfully deployed. If the version  is not specified, any active function versions will handle the request. If  the version is specified in the URI, then the request is exclusively processed  by the designated version of the function. By default, this endpoint will block  for 5 seconds. If the request is not fulfilled before the timeout, it''s status  is considered in-progress or pending and the response includes HTTP status code  202 with an invocation request ID, indicating that the client should commence  polling for the result using the invocation request ID. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with ''invoke_function''  scope in the HTTP Authorization header. Additionally, this endpoint has the  capability to provide updates on the progress of the request, contingent  upon the workload''s provision of such information. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. '
      operationId: invokeFunctionStreaming_1_1
      parameters:
        - name: NVCF-INPUT-ASSET-REFERENCES
          in: header
          required: false
          schema:
            maxItems: 2147483647
            minItems: 0
            type: array
            items:
              type: string
        - name: functionId
          in: path
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
        - name: versionId
          in: path
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
        - name: NVCF-POLL-SECONDS
          in: header
          required: false
          schema:
            maximum: 300
            minimum: 0
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        "200":
          description: Invocation is fulfilled
          headers:
            NVCF-REQID:
              description: Invocation Request Id
              style: simple
              schema:
                type: string
            NVCF-PERCENT-COMPLETE:
              description: Percentage complete
              style: simple
              schema:
                type: string
            NVCF-STATUS:
              description: Invocation status
              style: simple
              schema:
                type: string
          content:
            text/event-stream:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    short:
                      type: integer
                      format: int32
                    char:
                      type: string
                    int:
                      type: integer
                      format: int32
                    long:
                      type: integer
                      format: int64
                    float:
                      type: number
                      format: float
                    double:
                      type: number
                      format: double
                    direct:
                      type: boolean
                    readOnly:
                      type: boolean
            application/json:
              schema:
                type: object
                properties:
                  short:
                    type: integer
                    format: int32
                  char:
                    type: string
                  int:
                    type: integer
                    format: int32
                  long:
                    type: integer
                    format: int64
                  float:
                    type: number
                    format: float
                  double:
                    type: number
                    format: double
                  direct:
                    type: boolean
                  readOnly:
                    type: boolean
        "202":
          description: Result is pending. Client should poll using the requestId.
          headers:
            NVCF-REQID:
              description: Invocation Request Id
              style: simple
              schema:
                type: string
            NVCF-PERCENT-COMPLETE:
              description: Percentage complete
              style: simple
              schema:
                type: string
            NVCF-STATUS:
              description: Invocation status
              style: simple
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  short:
                    type: integer
                    format: int32
                  char:
                    type: string
                  int:
                    type: integer
                    format: int32
                  long:
                    type: integer
                    format: int64
                  float:
                    type: number
                    format: float
                  double:
                    type: number
                    format: double
                  direct:
                    type: boolean
                  readOnly:
                    type: boolean
        "302":
          description: |
            Client should use the URL specified in the 'Location' response header to fetch
             large result.
          headers:
            NVCF-REQID:
              description: Invocation Request Id
              style: simple
              schema:
                type: string
            NVCF-PERCENT-COMPLETE:
              description: Percentage complete
              style: simple
              schema:
                type: string
            NVCF-STATUS:
              description: Invocation status
              style: simple
              schema:
                type: string
            Location:
              description: URL to get the result
              style: simple
              schema:
                type: string
        "402":
          description: Cloud credits expired for public functions. Please contact NVIDIA representatives.
          content:
            application/json:
              schema:
                type: object
                properties:
                  short:
                    type: integer
                    format: int32
                  char:
                    type: string
                  int:
                    type: integer
                    format: int32
                  long:
                    type: integer
                    format: int64
                  float:
                    type: number
                    format: float
                  double:
                    type: number
                    format: double
                  direct:
                    type: boolean
                  readOnly:
                    type: boolean
        "403":
          description: |
            Either missing scope in the auth(SSA JWT / SAK) token and/or missing resource entry
             in the SAK for the function.
          content:
            application/json:
              schema:
                type: object
                properties:
                  short:
                    type: integer
                    format: int32
                  char:
                    type: string
                  int:
                    type: integer
                    format: int32
                  long:
                    type: integer
                    format: int64
                  float:
                    type: number
                    format: float
                  double:
                    type: number
                    format: double
                  direct:
                    type: boolean
                  readOnly:
                    type: boolean
        "429":
          description: Client is doing too many requests per second and should slow down request rate.
          content:
            application/json:
              schema:
                type: object
                properties:
                  short:
                    type: integer
                    format: int32
                  char:
                    type: string
                  int:
                    type: integer
                    format: int32
                  long:
                    type: integer
                    format: int64
                  float:
                    type: number
                    format: float
                  double:
                    type: number
                    format: double
                  direct:
                    type: boolean
                  readOnly:
                    type: boolean
  /v2/nvcf/exec/functions/{functionId}:
    post:
      tags:
        - Envelope Function Invocation
      summary: Call Function
      description: 'Invokes the specified function that was successfully deployed. If the version  is not specified, any active function versions will handle the request. If  the version is specified in the URI, then the request is exclusively processed  by the designated version of the function. By default, this endpoint will block  for 5 seconds. If the request is not fulfilled before the timeout, it''s status  is considered in-progress or pending and the response includes HTTP status code  202 with an invocation request ID, indicating that the client should commence  polling for the result using the invocation request ID. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with ''invoke_function''  scope in the HTTP Authorization header. Additionally, this endpoint has the  capability to provide updates on the progress of the request, contingent  upon the workload''s provision of such information. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. '
      operationId: invokeFunction
      parameters:
        - name: functionId
          in: path
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvokeFunctionRequest'
        required: true
      responses:
        "200":
          description: Invocation is fulfilled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeFunctionResponse'
        "202":
          description: Result is pending. Client should poll using the requestId.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeFunctionResponse'
        "302":
          description: |
            Client should use the URL specified in the 'Location' response header to fetch
             large result.
          headers:
            Location:
              style: simple
              schema:
                type: string
        "402":
          description: Cloud credits expired for public functions. Please contact NVIDIA representatives.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeFunctionResponse'
        "403":
          description: |
            Either missing scope in the auth(SSA JWT / SAK) token and/or missing resource entry
             in the SAK for the function.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeFunctionResponse'
        "429":
          description: Client is doing too many requests per second and should slow down request rate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeFunctionResponse'
      deprecated: true
  /v2/nvcf/exec/functions/{functionId}/versions/{versionId}:
    post:
      tags:
        - Envelope Function Invocation
      summary: Call Function
      description: 'Invokes the specified function that was successfully deployed. If the version  is not specified, any active function versions will handle the request. If  the version is specified in the URI, then the request is exclusively processed  by the designated version of the function. By default, this endpoint will block  for 5 seconds. If the request is not fulfilled before the timeout, it''s status  is considered in-progress or pending and the response includes HTTP status code  202 with an invocation request ID, indicating that the client should commence  polling for the result using the invocation request ID. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with ''invoke_function''  scope in the HTTP Authorization header. Additionally, this endpoint has the  capability to provide updates on the progress of the request, contingent  upon the workload''s provision of such information. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. '
      operationId: invokeFunction_1
      parameters:
        - name: functionId
          in: path
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
        - name: versionId
          in: path
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvokeFunctionRequest'
        required: true
      responses:
        "200":
          description: Invocation is fulfilled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeFunctionResponse'
        "202":
          description: Result is pending. Client should poll using the requestId.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeFunctionResponse'
        "302":
          description: |
            Client should use the URL specified in the 'Location' response header to fetch
             large result.
          headers:
            Location:
              style: simple
              schema:
                type: string
        "402":
          description: Cloud credits expired for public functions. Please contact NVIDIA representatives.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeFunctionResponse'
        "403":
          description: |
            Either missing scope in the auth(SSA JWT / SAK) token and/or missing resource entry
             in the SAK for the function.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeFunctionResponse'
        "429":
          description: Client is doing too many requests per second and should slow down request rate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeFunctionResponse'
      deprecated: true
  /v2/nvcf/functions/{functionId}/versions:
    get:
      tags:
        - Function Management
      summary: List Function Versions
      description: 'Lists details of all the versions of the specified function in the authenticated  NVIDIA Cloud Account. Requires either a bearer token or an api-key with  ''list_functions'' or ''list_functions_details'' scopes in the HTTP Authorization  header. '
      operationId: getFunctions
      parameters:
        - name: functionId
          in: path
          description: Function id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFunctionsResponse'
    post:
      tags:
        - Function Management
      summary: Create Function Version
      description: 'Creates a version of the specified function within the authenticated NVIDIA  Cloud Account. Requires a bearer token with ''register_function'' scope in the  HTTP Authorization header. '
      operationId: createFunction
      parameters:
        - name: functionId
          in: path
          description: Function id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFunctionRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFunctionResponse'
  /v2/nvcf/functions:
    get:
      tags:
        - Function Management
      summary: List Functions
      description: Lists all the functions associated with the authenticated NVIDIA Cloud Account.  Requires either a bearer token or an api-key with 'list_functions' or  'list_functions_details' scopes in the HTTP Authorization header.
      operationId: getFunctions_1
      parameters:
        - name: visibility
          in: query
          description: |
            Query param 'visibility' indicates the kind of functions to be included
             in the response.
          required: false
          schema:
            maxItems: 2147483647
            minItems: 0
            uniqueItems: true
            type: array
            items:
              type: string
              enum:
                - authorized
                - private
                - public
            default:
              - authorized
              - private
              - public
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFunctionsResponse'
    post:
      tags:
        - Function Management
      summary: Create Function
      description: 'Creates a new function within the authenticated NVIDIA Cloud Account. Requires a  bearer token with ''register_function'' scope in the HTTP Authorization header. '
      operationId: createFunction_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFunctionRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFunctionResponse'
  /v2/nvcf/authorizations/functions/{functionId}/versions/{functionVersionId}:
    get:
      tags:
        - Authorized Accounts
      summary: Get Account Authorizations For Function Version
      description: 'Gets NVIDIA Cloud Account IDs that are authorized to invoke specified function  version. Response includes authorized accounts that were added specifically  to the function version and the inherited authorized accounts that were  added at the function level. Access to this functionality mandates the inclusion of a bearer token with the  ''authorize_clients'' scope in the HTTP Authorization header '
      operationId: getAuthorizedPartiesForSpecificVersion
      parameters:
        - name: functionId
          in: path
          description: Function id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
        - name: functionVersionId
          in: path
          description: Function version
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizedPartiesResponse'
    post:
      tags:
        - Authorized Accounts
      summary: Authorize Accounts To Invoke Function Version
      description: 'Authorizes additional NVIDIA Cloud Accounts to invoke a specific function  version. By default, a function belongs to the NVIDIA Cloud Account that  created it, and the credentials used for function invocation must reference  the same NVIDIA Cloud Account. Upon invocation of this endpoint, any existing  authorized accounts will be overwritten by the newly specified authorized  accounts. Access to this functionality mandates the inclusion of a bearer token with the  ''authorize_clients'' scope in the HTTP Authorization header '
      operationId: createAuthorizedPartiesForSpecificVersion
      parameters:
        - name: functionId
          in: path
          description: Function id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
        - name: functionVersionId
          in: path
          description: Function version id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizedPartiesRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizedPartiesResponse'
    delete:
      tags:
        - Authorized Accounts
      summary: Delete All Extra Authorizations For Function Version
      description: 'Deletes all the authorized accounts that are directly associated with the  specified function version. Authorized parties that are inherited by the  function version are not deleted. If the specified function version is public,  then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  ''authorize_clients'' scope in the HTTP Authorization header '
      operationId: deleteAuthorizedPartiesForSpecificVersion
      parameters:
        - name: functionId
          in: path
          description: Function id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
        - name: functionVersionId
          in: path
          description: Function version
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizedPartiesResponse'
  /v2/nvcf/authorizations/functions/{functionId}:
    get:
      tags:
        - Authorized Accounts
      summary: List Account Authorizations For Function
      description: 'Lists NVIDIA Cloud Account IDs that are authorized to invoke any version of the  specified function. The response includes an array showing authorized accounts  for each version. Individual versions of a function can have their own  authorized accounts. So, each object in the array can have different  authorized accounts listed. Access to this functionality mandates the inclusion of a bearer token with the  ''authorize_clients'' scope in the HTTP Authorization header '
      operationId: getAuthorizedPartiesForAllVersions
      parameters:
        - name: functionId
          in: path
          description: Function id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAuthorizedPartiesResponse'
    post:
      tags:
        - Authorized Accounts
      summary: Authorize Accounts To Invoke Function
      description: 'Authorizes additional NVIDIA Cloud Accounts to invoke any version of the  specified function. By default, a function belongs to the NVIDIA Cloud Account  that created it, and the credentials used for function invocation must  reference the same NVIDIA Cloud Account. Upon invocation of this endpoint, any  existing authorized accounts will be overwritten by the newly specified  authorized accounts. Access to this functionality mandates the inclusion of a bearer token with the  ''authorize_clients'' scope in the HTTP Authorization header '
      operationId: createAuthorizedPartiesForAllVersions
      parameters:
        - name: functionId
          in: path
          description: Function id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizedPartiesRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizedPartiesResponse'
    delete:
      tags:
        - Authorized Accounts
      summary: Delete All Extra Authorizations For Function
      description: 'Deletes all the extra NVIDIA Cloud Accounts that were authorized to invoke the  function and all its versions. If a function version has its own set of  authorized accounts, those are not deleted. If the specified function is  public, then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  ''authorize_clients'' scope in the HTTP Authorization header '
      operationId: deleteAuthorizedPartiesForAllVersions
      parameters:
        - name: functionId
          in: path
          description: Function id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizedPartiesResponse'
  /v2/nvcf/assets:
    get:
      tags:
        - Asset Management
      summary: List Assets
      description: 'List assets owned by the current NVIDIA Cloud Account. Requires either a  bearer token or an api-key with invoke_function scope in the HTTP Authorization  header. '
      operationId: getAssets
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAssetsResponse'
    post:
      tags:
        - Asset Management
      summary: Create Asset
      description: Creates a unique id representing an asset and a pre-signed URL to upload the  asset artifact to AWS S3 bucket for the NVIDIA Cloud Account. Requires either  a bearer token or an api-key with 'invoke_function' scope in the HTTP  Authorization header.
      operationId: createAsset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssetRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAssetResponse'
  /v2/nvcf/authorizations/functions/{functionId}/versions/{functionVersionId}/remove:
    patch:
      tags:
        - Authorized Accounts
      summary: Unauthorize Account From Invoking Function Version
      description: 'Removes the specified NVIDIA Cloud Account from the set of authorized accounts  that are directly associated with specified function version. If the specified  function version does not have any of its own(not inherited) authorized  accounts, it results in a response with status 404. Also, if the specified  authorized account is not in the set of existing authorized parties that are  directly associated with the specified function version, it results in a  response with status code 400. If the specified function version is public,  then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  ''authorize_clients'' scope in the HTTP Authorization header '
      operationId: removeAuthorizedPartyForSpecificVersion
      parameters:
        - name: functionId
          in: path
          description: Function id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
        - name: functionVersionId
          in: path
          description: Function version
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchAuthorizedPartyRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizedPartiesResponse'
  /v2/nvcf/authorizations/functions/{functionId}/versions/{functionVersionId}/add:
    patch:
      tags:
        - Authorized Accounts
      summary: Authorize Additional Account To Invoke Function Version
      description: 'Adds the specified NVIDIA Cloud Account to the set of authorized accounts that  can invoke the specified function version. If the specified function version  does not have any existing inheritable authorized accounts, it results in a  response with status 404. If the specified account is already in the set of  existing authorized accounts that are directly associated with the function  version, it results in a response wit status code 409. If a function is public,  then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  ''authorize_clients'' scope in the HTTP Authorization header '
      operationId: addAuthorizedPartyForSpecificVersion
      parameters:
        - name: functionId
          in: path
          description: Function id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
        - name: functionVersionId
          in: path
          description: Function version
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchAuthorizedPartyRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizedPartiesResponse'
  /v2/nvcf/authorizations/functions/{functionId}/remove:
    patch:
      tags:
        - Authorized Accounts
      summary: Unauthorize Account From Invoking Function
      description: 'Removes the specified NVIDIA Cloud Account from the set of authorized accounts  that can invoke all the versions of the specified function. If the specified  function does not have any existing inheritable authorized parties, it results  in a response with status 404. Also, if the specified account is not in the  existing set of inheritable authorized accounts, it results in a response with  status 400. If the specified function is public, then Account Admin cannot  perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  ''authorize_clients'' scope in the HTTP Authorization header '
      operationId: removeAuthorizedPartyForAllVersions
      parameters:
        - name: functionId
          in: path
          description: Function id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchAuthorizedPartyRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizedPartiesResponse'
  /v2/nvcf/authorizations/functions/{functionId}/add:
    patch:
      tags:
        - Authorized Accounts
      summary: Authorize Additional Account To Invoke Function
      description: 'Adds the specified NVIDIA Cloud Account to the set of authorized accounts that  are can invoke all the versions of the specified function. If the specified  function does not have any existing inheritable authorized accounts, it results  in a response with status 404. If the specified account is already in the set  of existing inheritable authorized accounts, it results in a response with  status code 409. If a function is public, then Account Admin cannot perform  this operation. Access to this functionality mandates the inclusion of a bearer token with the  ''authorize_clients'' scope in the HTTP Authorization header '
      operationId: addAuthorizedPartyForAllVersions
      parameters:
        - name: functionId
          in: path
          description: Function id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchAuthorizedPartyRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizedPartiesResponse'
  /v2/nvcf/queues/functions/{functionId}/versions/{versionId}:
    get:
      tags:
        - Queue Details
      summary: Queue Details
      description: 'Provides details of all the queues associated with the specified function.  If a function has multiple versions and they are all deployed, then the  response includes details of all the queues. If the specified function  is public, then Account Admin cannot perform this operation. Requires a bearer token or an api-key with ''queue_details'' scope in the HTTP  Authorization header. '
      operationId: getQueuesDetails
      parameters:
        - name: functionId
          in: path
          description: Function id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
        - name: versionId
          in: path
          description: Function version id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetQueuesResponse'
  /v2/nvcf/queues/functions/{functionId}:
    get:
      tags:
        - Queue Details
      summary: Queue Details
      description: 'Provides details of all the queues associated with the specified function.  If a function has multiple versions and they are all deployed, then the  response includes details of all the queues. If the specified function  is public, then Account Admin cannot perform this operation. Requires a bearer token or an api-key with ''queue_details'' scope in the HTTP  Authorization header. '
      operationId: getQueuesDetails_1
      parameters:
        - name: functionId
          in: path
          description: Function id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetQueuesResponse'
  /v2/nvcf/queues/{requestId}/position:
    get:
      tags:
        - Queue Details
      summary: Queue Position
      description: 'Using the specified function invocation request id, returns the estimated  position of the corresponding message up to 1000 in the queue. Requires a bearer token or an api-key with ''queue_details'' scope in the HTTP  Authorization header. '
      operationId: getPositionInQueue
      parameters:
        - name: requestId
          in: path
          description: Function invocation request id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPositionInQueueResponse'
  /v2/nvcf/pexec/status/{requestId}:
    get:
      tags:
        - Function Invocation
      summary: Poll For Result Using Function Invocation Request
      description: 'Retrieves the status of an in-progress or pending request using its unique  invocation request ID. If the result is available, it will be included in  the response, marking the request as fulfilled. Conversely, if the result is  not yet available, the request is deemed pending. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with  ''invoke_function'' scope in the HTTP Authorization header. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. '
      operationId: getFunctionInvocationResult
      parameters:
        - name: requestId
          in: path
          description: Function invocation request id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
        - name: NVCF-POLL-SECONDS
          in: header
          required: false
          schema:
            maximum: 300
            minimum: 0
            type: integer
            format: int32
      responses:
        "200":
          description: Invocation is fulfilled
          headers:
            NVCF-REQID:
              description: Invocation Request Id
              style: simple
              schema:
                type: string
            NVCF-PERCENT-COMPLETE:
              description: Percentage complete
              style: simple
              schema:
                type: string
            NVCF-STATUS:
              description: Invocation status
              style: simple
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  short:
                    type: integer
                    format: int32
                  char:
                    type: string
                  int:
                    type: integer
                    format: int32
                  long:
                    type: integer
                    format: int64
                  float:
                    type: number
                    format: float
                  double:
                    type: number
                    format: double
                  direct:
                    type: boolean
                  readOnly:
                    type: boolean
        "202":
          description: Result is pending. Client should poll using the requestId.
          headers:
            NVCF-REQID:
              description: Invocation Request Id
              style: simple
              schema:
                type: string
            NVCF-PERCENT-COMPLETE:
              description: Percentage complete
              style: simple
              schema:
                type: string
            NVCF-STATUS:
              description: Invocation status
              style: simple
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  short:
                    type: integer
                    format: int32
                  char:
                    type: string
                  int:
                    type: integer
                    format: int32
                  long:
                    type: integer
                    format: int64
                  float:
                    type: number
                    format: float
                  double:
                    type: number
                    format: double
                  direct:
                    type: boolean
                  readOnly:
                    type: boolean
        "302":
          description: |
            Client should use the URL specified in the 'Location' response header to fetch
             large result.
          headers:
            NVCF-REQID:
              description: Invocation Request Id
              style: simple
              schema:
                type: string
            NVCF-PERCENT-COMPLETE:
              description: Percentage complete
              style: simple
              schema:
                type: string
            NVCF-STATUS:
              description: Invocation status
              style: simple
              schema:
                type: string
            Location:
              description: URL to get the result
              style: simple
              schema:
                type: string
        "402":
          description: Cloud credits expired for public functions. Please contact NVIDIA representatives.
          content:
            application/json:
              schema:
                type: object
                properties:
                  short:
                    type: integer
                    format: int32
                  char:
                    type: string
                  int:
                    type: integer
                    format: int32
                  long:
                    type: integer
                    format: int64
                  float:
                    type: number
                    format: float
                  double:
                    type: number
                    format: double
                  direct:
                    type: boolean
                  readOnly:
                    type: boolean
        "403":
          description: |
            Either missing scope in the auth(SSA JWT / SAK) token and/or missing resource entry
             in the SAK for the function.
          content:
            application/json:
              schema:
                type: object
                properties:
                  short:
                    type: integer
                    format: int32
                  char:
                    type: string
                  int:
                    type: integer
                    format: int32
                  long:
                    type: integer
                    format: int64
                  float:
                    type: number
                    format: float
                  double:
                    type: number
                    format: double
                  direct:
                    type: boolean
                  readOnly:
                    type: boolean
  /v2/nvcf/functions/{functionId}/versions/{functionVersionId}:
    get:
      tags:
        - Function Management
      summary: Get Function Version Details
      description: 'Retrieves detailed information of the specified function version in the  authenticated NVIDIA Cloud Account. Requires either a bearer token or an  api-key with ''list_functions'' or ''list_functions_details'' scopes in the HTTP  Authorization header. '
      operationId: getFunction
      parameters:
        - name: functionId
          in: path
          description: Function id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
        - name: functionVersionId
          in: path
          description: 'Version id '
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
        - name: includeSecrets
          in: query
          description: |
            Query param 'includeSecrets' indicates whether to include secret names
             for the function in the response.
          required: false
          schema:
            type: boolean
            default: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionResponse'
    delete:
      tags:
        - Function Management
      summary: Delete Function
      description: 'Deletes the specified function version in the authenticated NVIDIA Cloud  Account. Requires a bearer token with ''delete_function'' scope in the HTTP  Authorization header. If the function version is public, then Account Admin  cannot delete the function. '
      operationId: deleteFunction
      parameters:
        - name: functionId
          in: path
          description: Function id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
        - name: functionVersionId
          in: path
          description: Version id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      responses:
        "204":
          description: No Content
  /v2/nvcf/functions/ids:
    get:
      tags:
        - Function Management
      summary: List Function Ids
      description: 'Lists ids of all the functions in the authenticated NVIDIA Cloud Account.  Requires either a bearer token or an api-key with ''list_functions'' or  ''list_functions_details'' scopes in the HTTP Authorization header. '
      operationId: getFunctionIds
      parameters:
        - name: visibility
          in: query
          description: |
            Query param 'visibility' indicates the kind of functions to be included
             in the response.
          required: false
          schema:
            maxItems: 2147483647
            minItems: 0
            uniqueItems: true
            type: array
            items:
              type: string
              enum:
                - authorized
                - private
                - public
            default:
              - authorized
              - private
              - public
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFunctionIdsResponse'
  /v2/nvcf/exec/status/{requestId}:
    get:
      tags:
        - Envelope Function Invocation
      summary: Poll For Result Using Function Invocation Request
      description: 'Retrieves the status of an in-progress or pending request using its unique  invocation request ID. If the result is available, it will be included in  the response, marking the request as fulfilled. Conversely, if the result is  not yet available, the request is deemed pending. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with  ''invoke_function'' scope in the HTTP Authorization header. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. '
      operationId: getFunctionInvocationResult_1
      parameters:
        - name: requestId
          in: path
          description: Function invocation request id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      responses:
        "200":
          description: Invocation is fulfilled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeFunctionResponse'
        "202":
          description: Result is pending. Client should poll using the requestId.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeFunctionResponse'
        "302":
          description: |
            Client should use the URL specified in the 'Location' response header to fetch
             large result.
          headers:
            Location:
              style: simple
              schema:
                type: string
        "402":
          description: Cloud credits expired for public functions. Please contact NVIDIA representatives.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeFunctionResponse'
        "403":
          description: |
            Either missing scope in the auth(SSA JWT / SAK) token and/or missing resource entry
             in the SAK for the function.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeFunctionResponse'
      deprecated: true
  /v2/nvcf/clusterGroups:
    get:
      tags:
        - Cluster Groups and GPUs
      summary: List Cluster Groups
      description: 'Lists Cluster Groups for the current account. The response includes cluster  groups defined specifically in the current account and publicly available  cluster groups such as GFN, OCI, etc. Requires a bearer token with ''list_cluster_groups'' scope in HTTP Authorization header. '
      operationId: getClusterGroups
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterGroupsResponse'
  /v2/nvcf/clients/{clientId}:
    get:
      tags:
        - Client Management For NVIDIA Super Admins
      summary: Get Client details
      description: 'Gets details of the specified client.Requires a bearer token in the HTTP Authorization header with ''account_setup'' scope.  These endpoints are invoked by NVIDIA Super Admins working across accounts. '
      operationId: getClientDetails
      parameters:
        - name: clientId
          in: path
          description: Client Id -- such as SSA Client Id
          required: true
          schema:
            maxLength: 6291456
            minLength: 0
            type: string
            format: UTF-8
      responses:
        "204":
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDetailsResponse'
  /v2/nvcf/assets/{assetId}:
    get:
      tags:
        - Asset Management
      summary: Show Asset Details
      description: 'Returns details for the specified asset-id belonging to the current NVIDIA  Cloud Account. Requires either a bearer token or an api-key with  ''invoke_function'' scope in the HTTP Authorization header. '
      operationId: getAsset
      parameters:
        - name: assetId
          in: path
          description: Asset id
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetResponse'
    delete:
      tags:
        - Asset Management
      summary: Delete Asset
      description: Deletes asset belonging to the current NVIDIA Cloud Account. Requires either  a bearer token or an api-key with 'invoke_function' scope in the HTTP  Authorization header.
      operationId: deleteAsset
      parameters:
        - name: assetId
          in: path
          description: Id of the asset to be deleted
          required: true
          schema:
            maxLength: 36
            minLength: 36
            type: string
            format: uuid
      responses:
        "204":
          description: No Content
  /health/**:
    get:
      tags:
        - Health
      summary: Get Health Information
      description: Get Health Information about this service
      operationId: getHealth
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthComponent'
components:
  schemas:
    SecretDto:
      required:
        - name
        - value
      type: object
      properties:
        name:
          maxLength: 64
          minLength: 1
          pattern: ^[a-z0-9A-Z][a-z0-9A-Z\_]*$
          type: string
          description: Secret name
        value:
          maxLength: 4096
          minLength: 1
          type: string
          description: Secret value
      description: Data Transfer Object(DTO) representing secret name/value pair
    UpdateSecretsRequest:
      required:
        - secrets
      type: object
      properties:
        secrets:
          uniqueItems: true
          type: array
          description: Secrets
          items:
            $ref: '#/components/schemas/SecretDto'
      description: Request payload to update secrets
    UpdateFunctionMetadataRequest:
      type: object
      properties:
        tags:
          maxItems: 64
          minItems: 0
          uniqueItems: true
          type: array
          description: Set of tags provided by user
          items:
            type: string
            description: Set of tags provided by user
      description: Request payload to create tags.
    ArtifactDto:
      required:
        - name
        - uri
        - version
      type: object
      properties:
        name:
          type: string
          description: Artifact name
        version:
          type: string
          description: Artifact version
        uri:
          type: string
          description: Artifact URI
          format: uri
      description: Data Transfer Object(DTO) representing an artifact
    ContainerEnvironmentEntryDto:
      required:
        - key
        - value
      type: object
      properties:
        key:
          type: string
          description: Container environment key
        value:
          type: string
          description: Container environment value
      description: Data Transfer Object(DTO) representing a container environment entry
    FunctionDto:
      required:
        - createdAt
        - functionType
        - healthUri
        - id
        - name
        - ncaId
        - status
        - versionId
      type: object
      properties:
        id:
          type: string
          description: Unique function id
          format: uuid
        ncaId:
          type: string
          description: NVIDIA Cloud Account Id
        versionId:
          type: string
          description: Unique function version id
          format: uuid
        name:
          type: string
          description: Function name
        status:
          type: string
          description: Function status
          enum:
            - ACTIVE
            - DEPLOYING
            - ERROR
            - INACTIVE
            - DELETED
        inferenceUrl:
          type: string
          description: Entrypoint for invoking the container to process requests
          format: uri
        ownedByDifferentAccount:
          type: boolean
          description: |
            Indicates whether the function is owned by another account. If the account
             that is being used to lookup functions happens to be authorized to invoke/list
             this function which is owned by a different account, then this field is set
             to true and ncaId will contain the id of the account that owns the function.
             Otherwise, this field is not set as it defaults to false.
        inferencePort:
          type: integer
          description: Optional port number where the inference listener is running - defaults to 8000 for Triton
          format: int32
        containerArgs:
          type: string
          description: Args used to launch the container
        containerEnvironment:
          type: array
          description: Environment settings used to launch the container
          items:
            $ref: '#/components/schemas/ContainerEnvironmentEntryDto'
        models:
          uniqueItems: true
          type: array
          description: Optional set of models
          items:
            $ref: '#/components/schemas/ArtifactDto'
        containerImage:
          type: string
          description: Optional custom container
          format: uri
        apiBodyFormat:
          type: string
          description: Invocation request body format
          enum:
            - PREDICT_V2
            - CUSTOM
        helmChart:
          type: string
          description: Optional Helm Chart
          format: uri
        helmChartServiceName:
          type: string
          description: |
            Helm Chart Service Name specified only when helmChart property is specified
        healthUri:
          type: string
          description: Health endpoint for the container or helmChart
          format: uri
        createdAt:
          type: string
          description: Function creation timestamp
          format: date-time
        activeInstances:
          type: array
          description: List of active instances for this function.
          items:
            $ref: '#/components/schemas/InstanceDto'
        resources:
          uniqueItems: true
          type: array
          description: Optional set of resources.
          items:
            $ref: '#/components/schemas/ArtifactDto'
        tags:
          uniqueItems: true
          type: array
          description: Optional set of tags. Maximum allowed number of tags per function is 64. Maximum length of each tag is 128 chars.
          items:
            type: string
            description: Optional set of tags. Maximum allowed number of tags per function is 64. Maximum length of each tag is 128 chars.
        description:
          type: string
          description: Function/version description
        health:
          $ref: '#/components/schemas/HealthDto'
        functionType:
          type: string
          description: Used to indicate a STREAMING function. Defaults to DEFAULT.
          enum:
            - DEFAULT
            - STREAMING
        secrets:
          uniqueItems: true
          type: array
          description: Optional secret names
          items:
            type: string
            description: Optional secret names
      description: Data Transfer Object (DTO) representing a function
    FunctionResponse:
      required:
        - function
      type: object
      properties:
        function:
          $ref: '#/components/schemas/FunctionDto'
      description: Response body with function details
    HealthDto:
      required:
        - expectedStatusCode
        - port
        - protocol
        - timeout
        - uri
      type: object
      properties:
        protocol:
          type: string
          description: HTTP/gPRC protocol type for health endpoint
          enum:
            - HTTP
            - gRPC
        uri:
          type: string
          description: Health endpoint for the container or the helmChart
          format: uri
        port:
          type: integer
          description: Port number where the health listener is running
          format: int32
        timeout:
          type: string
          description: ISO 8601 duration string in PnDTnHnMn.nS format
          format: PnDTnHnMn.nS
          example: PT10S
        expectedStatusCode:
          type: integer
          description: Expected return status code considered as successful.
          format: int32
      description: Data Transfer Object(DTO) representing a function ne
    InstanceDto:
      type: object
      properties:
        instanceId:
          type: string
          description: Unique id of the instance
        functionId:
          type: string
          description: Function executing on the instance
          format: uuid
        functionVersionId:
          type: string
          description: Function version executing on the instance
          format: uuid
        instanceType:
          type: string
          description: GPU instance-type powering the instance
        instanceStatus:
          type: string
          description: Instance status
          enum:
            - ACTIVE
            - ERRORED
            - PREEMPTED
            - DELETED
        sisRequestId:
          type: string
          description: SIS request-id used to launch this instance
          format: uuid
        ncaId:
          type: string
          description: NVIDIA Cloud Account Id that owns the function running on the instance
        gpu:
          type: string
          description: GPU name powering the instance
        backend:
          type: string
          description: Backend where the instance is running
        location:
          type: string
          description: Location such as zone name or region where the instance is running
        instanceCreatedAt:
          type: string
          description: Instance creation timestamp
          format: date-time
        instanceUpdatedAt:
          type: string
          description: Instance's last updated timestamp
          format: date-time
      description: Data Transfer Object(DTO) representing a spot instance
    UpdateFunctionDeploymentRequest:
      required:
        - deploymentSpecifications
      type: object
      properties:
        deploymentSpecifications:
          type: array
          description: Deployment specs with GPU, instance-type, etc. details for update request
          items:
            $ref: '#/components/schemas/UpdateGpuSpecificationDto'
      description: Request to update function deployment spec
    UpdateGpuSpecificationDto:
      required:
        - gpu
        - instanceType
        - maxInstances
        - minInstances
      type: object
      properties:
        gpu:
          type: string
          description: GPU name from the cluster
        maxInstances:
          type: integer
          description: Maximum number of spot instances for the deployment
          format: int32
        minInstances:
          type: integer
          description: Minimum number of spot instances for the deployment
          format: int32
        instanceType:
          type: string
          description: Instance type, based on GPU, assigned to a Worker
        maxRequestConcurrency:
          maximum: 1024
          minimum: 1
          type: integer
          description: Max request concurrency between 1 (default) and 1024.
          format: int32
      description: Data Transfer Object(DTO) representing GPU specification for Deployment Update case.
    DeploymentHealthDto:
      required:
        - backend
        - error
        - gpu
      type: object
      properties:
        sisRequestId:
          type: string
          description: SIS Request ID
          format: uuid
        gpu:
          type: string
          description: GPU Type as per SDD
        backend:
          type: string
          description: Backend/CSP where the GPU powered instance will be launched
        instanceType:
          type: string
          description: Instance type
        error:
          type: string
          description: Deployment error
      description: Data Transfer Object(DTO) representing deployment error
    DeploymentResponse:
      required:
        - deployment
      type: object
      properties:
        deployment:
          $ref: '#/components/schemas/FunctionDeploymentDto'
      description: Function Deployment Response
    FunctionDeploymentDto:
      required:
        - createdAt
        - deploymentSpecifications
        - functionId
        - functionName
        - functionStatus
        - functionVersionId
        - ncaId
      type: object
      properties:
        functionId:
          type: string
          description: Function id
          format: uuid
        functionVersionId:
          type: string
          description: Function version id
          format: uuid
        functionName:
          type: string
          description: Function name
        ncaId:
          type: string
          description: NVIDIA Cloud Account Id
        functionStatus:
          type: string
          description: Function status
          enum:
            - ACTIVE
            - DEPLOYING
            - ERROR
            - INACTIVE
            - DELETED
        requestQueueUrl:
          type: string
          description: Deprecated Request Queue URL
          deprecated: true
        healthInfo:
          type: array
          description: |
            Health info for a deployment specification is included only if there are any
             issues/errors.
          items:
            $ref: '#/components/schemas/DeploymentHealthDto'
        deploymentSpecifications:
          type: array
          description: Function deployment details
          items:
            $ref: '#/components/schemas/GpuSpecificationDto'
        createdAt:
          type: string
          description: Function deployment creation timestamp
          format: date-time
      description: Function deployment response
    GpuSpecificationDto:
      required:
        - gpu
        - instanceType
        - maxInstances
        - minInstances
      type: object
      properties:
        gpu:
          type: string
          description: GPU name from the cluster
        backend:
          type: string
          description: Backend/CSP where the GPU powered instance will be launched
        maxInstances:
          type: integer
          description: Maximum number of spot instances for the deployment
          format: int32
        minInstances:
          type: integer
          description: Minimum number of spot instances for the deployment
          format: int32
        instanceType:
          type: string
          description: Instance type, based on GPU, assigned to a Worker
        availabilityZones:
          type: array
          description: List of availability-zones(or clusters) in the cluster group
          items:
            type: string
            description: List of availability-zones(or clusters) in the cluster group
        maxRequestConcurrency:
          maximum: 1024
          minimum: 1
          type: integer
          description: Max request concurrency between 1 (default) and 1024.
          format: int32
        configuration:
          type: object
        clusters:
          uniqueItems: true
          type: array
          description: |
            Specific clusters within spot instance or worker node powered by the selected
            instance-type to deploy function.
          items:
            type: string
            description: |
              Specific clusters within spot instance or worker node powered by the selected
              instance-type to deploy function.
        regions:
          uniqueItems: true
          type: array
          description: |
            List of regions allowed to deploy. The instance or worker node will be in one of
            the specified geographical regions.
          items:
            type: string
            description: |
              List of regions allowed to deploy. The instance or worker node will be in one of
              the specified geographical regions.
        attributes:
          uniqueItems: true
          type: array
          description: |
            Specific attributes capabilities to deploy functions.
          items:
            type: string
            description: |
              Specific attributes capabilities to deploy functions.
        preferredOrder:
          maximum: 99
          minimum: 1
          type: integer
          description: Preferred order of deployment if there are several gpu specs.
          format: int32
      description: Data Transfer Object(DTO) representing GPU specification.
    InvokeFunctionRequest:
      required:
        - requestBody
      type: object
      properties:
        requestHeader:
          $ref: '#/components/schemas/RequestHeaderDto'
        requestBody:
          type: object
      description: Request body for creating a job/task for inference/train using a GPU powered spot instance in cloud.
    MeteringDataEntryDto:
      required:
        - key
        - value
      type: object
      properties:
        key:
          type: string
          description: Metering/Billing key
        value:
          type: string
          description: Metering/Billing value
      description: Data Transfer Object(DTO) representing a billing/metering data entry
    RequestHeaderDto:
      type: object
      properties:
        inputAssetReferences:
          type: array
          description: List of UUIDs corresponding to the uploaded assets to be used as input for executing the task.
          items:
            type: string
            description: List of UUIDs corresponding to the uploaded assets to be used as input for executing the task.
            format: uuid
        meteringData:
          type: array
          description: Metadata used for billing/metering purposes.
          items:
            $ref: '#/components/schemas/MeteringDataEntryDto'
        pollDurationSeconds:
          maximum: 300
          type: integer
          description: Polling timeout duration.
          format: int32
          default: 300
      description: |
        Data Transfer Object(DTO) representing header/address for Cloud Functions processing.
    InvokeFunctionResponse:
      type: object
      properties:
        reqId:
          type: string
          description: Request id
          format: uuid
        status:
          type: string
          description: Status of the task/job executing cloud function.
          enum:
            - errored
            - in-progress
            - fulfilled
            - pending-evaluation
            - rejected
        responseReference:
          type: string
          description: For large results, responseReference will be a pre-signeddownload URL.
          format: url
        percentComplete:
          type: integer
          description: Progress indicator for the task/job executing cloud function.
          format: int32
        errorCode:
          type: integer
          description: Error code from the container while executing cloud function.
          format: int32
        response:
          type: string
          description: Response/result of size < 5MB size for the task/job executing cloud function.
      description: Response body with result from a request for executing a job/task as a cloud function using a GPU powered spot/on-demand instance.
    CreateFunctionRequest:
      required:
        - inferenceUrl
        - name
      type: object
      properties:
        name:
          maxLength: 128
          minLength: 1
          pattern: ^[a-z0-9A-Z][a-z0-9A-Z\-_]*$
          type: string
          description: Function name must start with lowercase/uppercase/digit and can only contain lowercase, uppercase, digit, hyphen, and underscore characters
        inferenceUrl:
          type: string
          description: Entrypoint for invoking the container to process a request
          format: uri
        healthUri:
          type: string
          description: Health endpoint for the container or the helmChart
          format: uri
          deprecated: true
        inferencePort:
          type: integer
          description: |
            Optional port number where the inference listener is running. Defaults to 8000
             for Triton.
          format: int32
        health:
          $ref: '#/components/schemas/HealthDto'
        containerArgs:
          type: string
          description: Args to be passed when launching the container
        containerEnvironment:
          type: array
          description: Environment settings for launching the container
          items:
            $ref: '#/components/schemas/ContainerEnvironmentEntryDto'
        models:
          uniqueItems: true
          type: array
          description: Optional set of models
          items:
            $ref: '#/components/schemas/ArtifactDto'
        containerImage:
          type: string
          description: Optional custom container image
          format: uri
        helmChart:
          type: string
          description: Optional Helm Chart
          format: uri
        helmChartServiceName:
          type: string
          description: |
            Helm Chart Service Name is required when helmChart property is specified
        resources:
          uniqueItems: true
          type: array
          description: Optional set of resources
          items:
            $ref: '#/components/schemas/ArtifactDto'
        apiBodyFormat:
          type: string
          description: Invocation request body format
          enum:
            - PREDICT_V2
            - CUSTOM
        tags:
          maxItems: 64
          minItems: 0
          uniqueItems: true
          type: array
          description: Optional set of tags - could be empty. Provided by user
          items:
            pattern: '[a-zA-Z0-9\-_]+'
            type: string
            description: Optional set of tags - could be empty. Provided by user
        description:
          type: string
          description: Optional function/version description
        secrets:
          uniqueItems: true
          type: array
          description: Optional secrets
          items:
            $ref: '#/components/schemas/SecretDto'
        functionType:
          type: string
          description: Optional function type, used to indicate a STREAMING function. Defaults to DEFAULT.
          enum:
            - DEFAULT
            - STREAMING
      description: Request payload to create function.
    CreateFunctionResponse:
      required:
        - function
      type: object
      properties:
        function:
          $ref: '#/components/schemas/FunctionDto'
      description: Response body for create function request.
    FunctionDeploymentRequest:
      required:
        - deploymentSpecifications
      type: object
      properties:
        deploymentSpecifications:
          type: array
          description: Deployment specs with Backend, GPU, instance-type, etc. details
          items:
            $ref: '#/components/schemas/GpuSpecificationDto'
      description: Request to deploy a function
    AuthorizedPartiesRequest:
      required:
        - authorizedParties
      type: object
      properties:
        authorizedParties:
          type: array
          description: Parties authorized to invoke function
          items:
            $ref: '#/components/schemas/AuthorizedPartyDto'
      description: Request to associated authorized parties for a specific version or allversions of a function
    AuthorizedPartyDto:
      required:
        - ncaId
      type: object
      properties:
        clientId:
          type: string
          description: |-
            Client Id -- 'sub' claim in the JWT. This field should not be
             specified anymore.
        ncaId:
          type: string
          description: NVIDIA Cloud Account authorized to invoke the function
      description: Data Transfer Object(DTO) representing an authorized party.
    AuthorizedPartiesByFunctionDto:
      required:
        - id
        - ncaId
      type: object
      properties:
        id:
          type: string
          description: Function id
          format: uuid
        ncaId:
          type: string
          description: NVIDIA Cloud Account Id
        versionId:
          type: string
          description: Function version id
          format: uuid
        authorizedParties:
          type: array
          description: Authorized parties allowed to invoke the function
          items:
            $ref: '#/components/schemas/AuthorizedPartyDto'
      description: Data Transfer Object(DTO) representing a function with authorized accounts
    AuthorizedPartiesResponse:
      required:
        - function
      type: object
      properties:
        function:
          $ref: '#/components/schemas/AuthorizedPartiesByFunctionDto'
      description: Parties authorized to invoke function
    CreateAssetRequest:
      required:
        - contentType
        - description
      type: object
      properties:
        contentType:
          type: string
          description: Content type of the asset such image/png, image/jpeg, etc.
        description:
          type: string
          description: Asset description
      description: Request payload to create an asset-id and the corresponding pre-signed URL to upload an asset of specified content-type to AWS S3 bucket.
    CreateAssetResponse:
      type: object
      properties:
        assetId:
          type: string
          description: Unique id of the asset to be uploaded to AWS S3 bucket
          format: uuid
        uploadUrl:
          type: string
          description: Pre-signed upload URL to upload asset
          format: url
        contentType:
          type: string
          description: Content type of the asset such image/png, image/jpeg, etc.
        description:
          type: string
          description: Asset description to be used when uploading the asset
      description: Response body containing asset-id and the corresponding pre-signed URL to upload an asset of specified content-type to AWS S3 bucket.
    PatchAuthorizedPartyRequest:
      required:
        - authorizedParty
      type: object
      properties:
        authorizedParty:
          $ref: '#/components/schemas/AuthorizedPartyDto'
      description: |
        Request payload to associate/disassociate authorized party with function
    GetQueuesResponse:
      required:
        - functionId
        - queues
      type: object
      properties:
        functionId:
          type: string
          description: Function id
          format: uuid
        queues:
          type: array
          description: Details of all the queues associated with same named functions
          items:
            $ref: '#/components/schemas/QueueDto'
      description: Request queue details of all the functions with same id in an account
    QueueDto:
      required:
        - functionName
        - functionStatus
        - functionVersionId
      type: object
      properties:
        functionVersionId:
          type: string
          description: Function version id
          format: uuid
        functionName:
          type: string
          description: Function name
        functionStatus:
          type: string
          description: Function status
          enum:
            - ACTIVE
            - DEPLOYING
            - ERROR
            - INACTIVE
            - DELETED
        queueDepth:
          type: integer
          description: Approximate number of messages in the request queue
          format: int32
      description: Data Transfer Object(DTO) representing a request queue for function version
    GetPositionInQueueResponse:
      required:
        - functionId
        - functionVersionId
      type: object
      properties:
        functionVersionId:
          type: string
          description: Function version id
          format: uuid
        functionId:
          type: string
          description: Function id
          format: uuid
        positionInQueue:
          type: integer
          description: Position of request in queue
          format: int32
      description: Request position in queue for invocation request
    ListFunctionsResponse:
      required:
        - functions
      type: object
      properties:
        functions:
          type: array
          description: List of functions
          items:
            $ref: '#/components/schemas/FunctionDto'
      description: Response body containing list of functions
    ListFunctionIdsResponse:
      required:
        - functionIds
      type: object
      properties:
        functionIds:
          type: array
          description: List of function ids
          items:
            type: string
            description: List of function ids
            format: uuid
      description: Response body containing list of function ids in an account
    Cluster:
      type: object
      properties:
        k8sVersion:
          type: string
        id:
          type: string
        name:
          type: string
    ClusterGroup:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        ncaId:
          type: string
        authorizedNcaIds:
          type: array
          items:
            type: string
        gpus:
          type: array
          items:
            $ref: '#/components/schemas/Gpu'
        clusters:
          type: array
          items:
            $ref: '#/components/schemas/Cluster'
    ClusterGroupsResponse:
      type: object
      properties:
        clusterGroups:
          type: array
          items:
            $ref: '#/components/schemas/ClusterGroup'
    Gpu:
      type: object
      properties:
        name:
          type: string
        instanceTypes:
          type: array
          items:
            $ref: '#/components/schemas/InstanceType'
    InstanceType:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        default:
          type: boolean
    ClientDetailsDto:
      required:
        - name
        - ncaId
      type: object
      properties:
        clientId:
          type: string
          description: Client Id
        ncaId:
          type: string
          description: Associated NVIDIA Cloud Account id
        name:
          type: string
          description: Name of the associated NVIDIA Cloud Account
      description: Data Transfer Object(DTO) representing a client
    ClientDetailsResponse:
      required:
        - client
      type: object
      properties:
        client:
          $ref: '#/components/schemas/ClientDetailsDto'
      description: Response body for client.
    ListAuthorizedPartiesResponse:
      required:
        - functions
      type: object
      properties:
        functions:
          type: array
          description: Functions with authorized parties and other details
          items:
            $ref: '#/components/schemas/AuthorizedPartiesByFunctionDto'
      description: Parties authorized to invoke function
    AssetDto:
      type: object
      properties:
        assetId:
          type: string
          description: Asset id
          format: uuid
        description:
          type: string
          description: Description specified when creating the asset
        contentType:
          type: string
          description: Content-type specified when creating the asset
      description: Data Transfer Object(DTO) representing an asset
    AssetResponse:
      type: object
      properties:
        asset:
          $ref: '#/components/schemas/AssetDto'
    ListAssetsResponse:
      type: object
      properties:
        assets:
          type: array
          description: List of assets uploaded for the nca id
          items:
            $ref: '#/components/schemas/AssetDto'
      description: Response body containing list of assets of the current nca id
    HealthComponent:
      type: object
      properties:
        description:
          type: string
        status:
          type: string
